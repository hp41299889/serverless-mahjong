generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  createdAt   DateTime   @default(now()) @map("created_at")
  roundsEast  Round[]    @relation("EastPlayer")
  roundsSouth Round[]    @relation("SouthPlayer")
  roundsWest  Round[]    @relation("WestPlayer")
  roundsNorth Round[]    @relation("NorthPlayer")
  rounds      Round[]    @relation("PlayerRounds")
  records     Record[]   @relation("PlayerRecords")
  loseRecords Record[]
}

model Round {
  uid        String   @id @default(uuid()) @map("uid")
  deskType   DeskType @default(AUTO) @map("desk_type")
  base       Int
  point      Int
  createdAt  DateTime @default(now()) @map("created_at")
  east       Player?  @relation("EastPlayer", fields: [eastId], references: [id])
  eastId     Int?
  south      Player?  @relation("SouthPlayer", fields: [southId], references: [id])
  southId    Int?
  west       Player?  @relation("WestPlayer", fields: [westId], references: [id])
  westId     Int?
  north      Player?  @relation("NorthPlayer", fields: [northId], references: [id])
  northId    Int?
  players    Player[] @relation("PlayerRounds")
  records    Record[] @relation("RoundRecords")
}

model Record {
  uid       String  @id @default(uuid()) @map("uid")
  endType   EndType @map("end_type")
  point     Int? 
  createdAt DateTime @default(now()) @map("created_at")
  round     Round    @relation("RoundRecords", fields: [roundUid], references: [uid])
  roundUid  String
  winner    Player?  @relation("PlayerRecords", fields: [winnerId], references: [id])
  winnerId  Int?
  losers    Player[]
}

enum DeskType {
  AUTO
  MANUAL
}

enum EndType {
  WINNING
  SELF_DRAWN
  DRAW
  FAKE
}